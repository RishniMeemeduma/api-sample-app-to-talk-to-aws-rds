name: Build, Push and Deploy to ECR and ECS

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-if-merge:
    runs-on: ubuntu-latest
    outputs:
      is_merge: ${{ steps.check_merge.outputs.is_merge }}
    steps:
      - name: Check if this is a merge commit
        id: check_merge
        run: |
          if [[ "${{ github.event.head_commit.message }}" == "Merge pull request"* ]]; then
            echo "is_merge=true" >> $GITHUB_OUTPUT
          else
            echo "is_merge=false" >> $GITHUB_OUTPUT
          fi
          echo "Commit message: ${{ github.event.head_commit.message }}"
      
  build-push-deploy:
    needs: check-if-merge
    if: needs.check-if-merge.outputs.is_merge == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'eu-west-2'
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    # Get current image for rollback if needed
    - name: Store current image info
      id: current-image
      run: |
        CURRENT_TASK_DEF=$(aws ecs describe-task-definition --task-definition tif-dev-eu-west-2-taskdef-api  --query taskDefinition)
        CURRENT_IMAGE=$(echo $CURRENT_TASK_DEF | jq -r '.containerDefinitions[0].image')
        echo "current_image=$CURRENT_IMAGE" >> $GITHUB_OUTPUT
        # Store current image in SSM Parameter Store for rollbacks
        aws ssm put-parameter --name "/tif-api/previous-image" --type String --value "$CURRENT_IMAGE" --overwrite
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: tif-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Store the full image URI for the ECS deployment
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download current task definition
      run: |
        aws ecs describe-task-definition --task-definition tif-dev-eu-west-2-taskdef-api \
          --query taskDefinition > task-definition.json

    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: api
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: tif-dev-eu-west-2-service-api
        cluster: tif-dev-eu-west-2-ecs-cluster
        wait-for-service-stability: true