name: Build and Push to ECR

on:
  push:
    branches: [main]

jobs:
  check-if-merge:
    runs-on : ubuntu-latest
    outputs:
      is_merge: ${{ steps.check_merge.outputs.is_merge }}
    steps:
      - name: Check if this is a merge commit
        id: check_merge
        run: |
          if [[ "${{ github.event.head_commit.message }}" == "Merge pull request"* ]]; then
            echo "is_merge=true" >> $GITHUB_OUTPUT
          else
            echo "is_merge=false" >> $GITHUB_OUTPUT
          fi
          echo "Commit message: ${{ github.event.head_commit.message }}"
      
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'eu-west-2'
        role-skip-session-tagging: true
        role-duration-seconds: 1200
        audience: '' 
        
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: tif-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push both tagged versions
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

        - name: Render web task definition
      id: render-web
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs/web-task-def.json
        container-name: web
        image: ${{ steps.login-ecr.outputs.registry }}/tif-web:${{ github.sha }}

    - name: Deploy web to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        cluster: your-cluster-name
        service: web-service
        task-definition: ${{ steps.render-web.outputs.task-definition }}